// require('dotenv').config()
// const express  = require('express')
// const cors     = require('cors')
// const mongoose = require('mongoose')
// const { syncLocationsRange } = require('./scraper')

// const ALL_LOCATIONS = [
//   'Oak Lawn',
//   'Orland Park',
//   'Albany Park',
//   'Buffalo Grove',
//   'OakBrook',
//   'Schaumburg',
// ]

// const app  = express()
// const PORT = process.env.PORT || 4000

// mongoose
//   .connect(process.env.MONGO_URI, { dbName: 'visits' })
//   .then(() => console.log('âœ”ï¸Ž MongoDB connected'))
//   .catch(err => {
//     console.error('âœ–ï¸Ž MongoDB connection error:', err.message)
//     process.exit(1)
//   })

// app.use(cors())
// app.use(express.json())

// app.get('/', (req, res) => res.send('ðŸš€ visits-scraper API up; try GET /api/visits'))

// app.get('/api/visits', async (req, res) => {
//   try {
//     // Support ?locations=Oak%20Lawn&locations=Orland%20Park
//     // or single ?location=Oak%20Lawn
//     // or nothing â†’ use ALL_LOCATIONS
//     let locations;
//     if (req.query.locations) {
//       locations = Array.isArray(req.query.locations)
//         ? req.query.locations
//         : [req.query.locations];
//     } else if (req.query.location) {
//       locations = [req.query.location];
//     } else {
//       locations = ALL_LOCATIONS;
//     }
//     const iso = /^\d{4}-\d{2}-\d{2}$/
//     let { date, startDate, endDate } = req.query
//     if (date) {
//       if (!iso.test(date)) return res.status(400).json({ error: 'date must be YYYY-MM-DD' })
//       startDate = endDate = date
//     } else {
//       if (!iso.test(startDate) || !iso.test(endDate)) {
//         return res.status(400).json({ error: 'startDate & endDate must be YYYY-MM-DD' })
//       }
//     }

//     const db = mongoose.connection.db
//     // build list of non-Sunday dates
//     const expected = []
//     for (let d=new Date(startDate); d<=new Date(endDate); d.setDate(d.getDate()+1)) {
//       if (d.getUTCDay() !== 0) expected.push(d.toISOString().slice(0,10))
//     }

//     // check which locs need scraping
//     const toSync = []
//     for (const loc of locations) {
//       const coll    = db.collection(loc.replace(/\s+/g,'_'))
//       const present = await coll.distinct('date',{ date:{ $gte: startDate, $lte: endDate } })
//       if (expected.some(d => !present.includes(d))) toSync.push(loc)
//     }

//     if (toSync.length) {
//       console.log('ðŸ”„ scraping gaps for:', toSync)
//       await syncLocationsRange(toSync, startDate, endDate)
//     }

//     // return everything
//     let all = []
//     for (const loc of locations) {
//       const coll = db.collection(loc.replace(/\s+/g,'_'))
//       const docs = await coll
//         .find({ date:{ $gte:startDate, $lte:endDate } })
//         .sort({ date:1, time:1 })
//         .toArray()
//       all = all.concat(docs)
//     }
//     res.json(all)

//   } catch (err) {
//     console.error(err)
//     res.status(500).json({ error: err.message })
//   }
// })

// app.listen(PORT, () => console.log(`ðŸš€ Server listening on http://0.0.0.0:${PORT}`))







// src/index.js
// require('dotenv').config();
// const express  = require('express');
// const cors     = require('cors');
// const mongoose = require('mongoose');
// // const { syncLocationsRange } = require('./scraper'); // scraping disabled

// const app  = express();
// const PORT = process.env.PORT || 4000;

// const MONTH_NAMES = [
//   'Jan','Feb','Mar','Apr','May','Jun',
//   'Jul','Aug','Sep','Oct','Nov','Dec'
// ];

// // â‘  Connect to Mongo
// mongoose
//   .connect(process.env.MONGO_URI, { dbName: 'visits' })
//   .then(() => console.log('âœ”ï¸Ž MongoDB connected'))
//   .catch(err => {
//     console.error('âœ–ï¸Ž MongoDB connection error:', err.message);
//     process.exit(1);
//   });

// app.use(cors());
// app.use(express.json());

// // log incoming requests
// app.use((req, res, next) => {
//   console.log(`> ${req.method} ${req.originalUrl}`, req.query);
//   next();
// });

// // Clinics list
// const ALL_LOCATIONS = [
//   'Oak Lawn',
//   'Orland Park',
//   'Albany Park',
//   'Buffalo Grove',
//   'OakBrook',
//   'Schaumburg',
// ];

// // buildDateFilter helper
// function buildDateFilter(start, end) {
//   return { date: { $gte: start, $lte: end } };
// }

// // buildExcludeFilter helper - excludes No-Show and Rescheduled data
// function buildExcludeFilter() {
//   return {
//     status: {
//       $nin: [
//         "No-Show/Resched",
//         "No-Show",
//         "no-show",
//         "Rescheduled",
//         "rescheduled",
//         "Reschedule",
//         "reschedule"
//       ]
//     },
//     reason: { $not: /^No Show/ }
//   };
// }

// // â”€â”€ 1) Leaderboard endpoint â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// // Returns an array of { location, leaderboard:[{doctor,count}...] }
// app.get('/api/leaderboard', async (req, res) => {
//   try {
//     const { location = 'All', startDate, endDate } = req.query;
//     if (!startDate || !endDate) {
//       return res.status(400).json({ error: 'startDate & endDate required' });
//     }
//     const locs = (location === 'All') ? ALL_LOCATIONS : [location];
//     const filter = buildDateFilter(startDate, endDate);

//     // raw visits leaderboard: count all visits per doctor
//     const results = [];
//     for (const loc of locs) {
//       const coll = mongoose.connection.db.collection(loc.replace(/\s+/g,'_'));
//       const pipeline = [
//         // exclude visits with a reason starting "No Show"
//         { $match: { ...filter, reason: { $not: /^No Show/ } } },
//         { $group: { _id: '$doctor', count: { $sum: 1 } } },
//         { $sort: { count: -1 } }
//       ];
//       const agg = await coll.aggregate(pipeline).toArray();
//       results.push({
//         location: loc,
//         leaderboard: agg.map(d => ({ doctor: d._id, count: d.count }))
//       });
//     }
//     res.json(results);
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ error: err.message });
//   }
// });

// // â”€â”€ 2) KPI endpoint â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// // Returns { byLocation:[{location,patientsSeen}], byDoctor:[{location,perDoctor:[{doctor,count}]}], byNewPatients:[{location,newPatients}] }
// app.get('/api/kpis', async (req, res) => {
//   try {
//     const { location = 'All', startDate, endDate } = req.query;
//     if (!startDate || !endDate) {
//       return res.status(400).json({ error: 'startDate & endDate required' });
//     }
//     const locs = (location === 'All') ? ALL_LOCATIONS : [location];
//     const filter = buildDateFilter(startDate, endDate);

//     const byLocation = [];
//     const byDoctor   = [];
//     const byNewPatients = [];
//     const excludeFilter = buildExcludeFilter();
    
//     for (const loc of locs) {
//       const coll = mongoose.connection.db.collection(loc.replace(/\s+/g,'_'));
//       const total = await coll.countDocuments({ ...filter, ...excludeFilter });
//       byLocation.push({ location: loc, patientsSeen: total });

//       const docs = await coll.aggregate([
//         { $match: { ...filter, ...excludeFilter } },
//         { $group: { _id: '$doctor', count: { $sum: 1 } } },
//         { $sort: { count: -1 } },
//       ]).toArray();
//       byDoctor.push({
//         location: loc,
//         perDoctor: docs.map(d => ({ doctor: d._id, count: d.count }))
//       });

//       // New patients calculation - count visits with type "NEW PATIENT"
//       const newPatientCount = await coll.countDocuments({ 
//         ...filter, 
//         ...excludeFilter,
//         type: "NEW PATIENT"
//       });
      
//       byNewPatients.push({ location: loc, newPatients: newPatientCount });
//     }
//     res.json({ byLocation, byDoctor, byNewPatients });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ error: err.message });
//   }
// });

// // â”€â”€ 3) Comparison endpoint â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// // Returns { location, thisYear, lastYear }
// app.get('/api/comparison', async (req, res) => {
//   try {
//     let { location } = req.query;
//     if (!location) {
//       return res.status(400).json({ error: 'location is required' });
//     }
//     // if someone does happen to send "All", just treat it as all real locations:
//     const isAll = location === 'All';
//     if (isAll) location = undefined;

//     const today = new Date();
//     const thisYear = today.getFullYear();
//     const currentMonth = today.getMonth();

//     const months = MONTH_NAMES.slice(0, currentMonth + 1);

//     async function countFor(year) {
//       const results = [];
//       const excludeFilter = buildExcludeFilter();
      
//       for (let m = 0; m <= currentMonth; m++) {
//         const start = new Date(year, m, 1);
//         const end   = new Date(year, m+1, 1);
//         // if no location specified, loop all LOCATIONS
//         const locs = location
//           ? [location]
//           : ALL_LOCATIONS;
//         let monthTotal = 0;
//         await Promise.all(locs.map(async loc => {
//           const coll = mongoose.connection.db.collection(loc.replace(/\s+/g,'_'));
//           const cnt  = await coll.countDocuments({
//             date: { 
//               $gte: start.toISOString().slice(0,10),
//               $lt:  end.toISOString().slice(0,10)
//             },
//             ...excludeFilter
//           });
//           monthTotal += cnt;
//         }));
//         results.push(monthTotal);
//       }
//       return results;
//     }

//     const [thisYearCounts, lastYearCounts] = await Promise.all([
//       countFor(thisYear),
//       countFor(thisYear - 1)
//     ]);

//     res.json({
//       location: location || 'All',
//       months,
//       thisYear: thisYearCounts,
//       lastYear: lastYearCounts,
//     });

//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ error: err.message });
//   }
// });

// // Root endpoint and visits retrieval
// app.get('/', (req, res) => res.send('ðŸš€ visits-scraper API up; try GET /api/visits'));
// app.get('/api/visits', async (req, res) => {
//   try {
//     // determine which locations to include
//     let locations;
//     if (req.query.locations) {
//       locations = Array.isArray(req.query.locations) ? req.query.locations : [req.query.locations];
//     } else if (req.query.location) {
//       locations = [req.query.location];
//     } else {
//       locations = ALL_LOCATIONS;
//     }
//     // validate date parameters
//     const iso = /^\d{4}-\d{2}-\d{2}$/;
//     let { date, startDate, endDate } = req.query;
//     if (date) {
//       if (!iso.test(date)) return res.status(400).json({ error: 'date must be YYYY-MM-DD' });
//       startDate = endDate = date;
//     } else {
//       if (!iso.test(startDate) || !iso.test(endDate)) {
//         return res.status(400).json({ error: 'startDate & endDate must be YYYY-MM-DD' });
//       }
//     }
//     const db = mongoose.connection.db;
//     // scraping disabled; just use existing MongoDB data

//     // fetch and return all visits
//     let all = [];
//     for (const loc of locations) {
//       const coll = db.collection(loc.replace(/\s+/g, '_'));
//       const docs = await coll.find({ date: { $gte: startDate, $lte: endDate } }).sort({ date:1, time:1 }).toArray();
//       all = all.concat(docs);
//     }
//     res.json(all);
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ error: err.message });
//   }
// });



















